package com.mwq.stat.frame;

import com.mwq.stat.tool.ScreenSize;
import java.util.logging.Level;
import java.util.logging.Logger;

/*
 * NewJDialog.java
 *
 * Created on 2008年8月22日, 下午1:30
 */
/**
 *版权所有：明日科技有限公司
 * @author  Administrator
 */
public class ProgressBarDialog extends javax.swing.JDialog {

    /** Creates new form NewJDialog */
    public ProgressBarDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        ScreenSize.centered(this);
    }

    // 确定进度
    public void adoptDeterminate(int maxValue) {
        progressBar.setMaximum(maxValue);// 设置进度条的最大值

    }

    public void setValue(int value) {
        progressBar.setValue(value);// 修改进度值

        if (value >= progressBar.getMaximum()) {// 查看是否等于或大于最大值

            progressBar.setString("已完成！");// 如果是则显示提示信息

        }
    }

    public void finishDeterminate() {
        try {
            Thread.sleep(200);
        } catch (InterruptedException ex) {
            Logger.getLogger(ProgressBarDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.dispose();
    }

    // 不确定进度
    public void adoptIndeterminate() {
        progressBar.setIndeterminate(true);// 采用不确定进度的进度条

        progressBar.setString("进行中...");// 设置进度条中的提示信息

    }

    public void finishIndeterminate() {
        progressBar.setIndeterminate(false);// 采用确定进度的进度条

        progressBar.setValue(100);// 设置进度值为最大值

        progressBar.setString("已完成！");// 设置进度条中的提示信息

        this.finishDeterminate();// 销毁用来显示进度条的对话框

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        borderPanel = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);

        borderPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));

        progressBar.setForeground(new java.awt.Color(255, 0, 0));
        progressBar.setStringPainted(true);

        javax.swing.GroupLayout borderPanelLayout = new javax.swing.GroupLayout(borderPanel);
        borderPanel.setLayout(borderPanelLayout);
        borderPanelLayout.setHorizontalGroup(
            borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(borderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        borderPanelLayout.setVerticalGroup(
            borderPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(borderPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(borderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(borderPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>                        

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                ProgressBarDialog dialog = new ProgressBarDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JPanel borderPanel;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration                   
}
