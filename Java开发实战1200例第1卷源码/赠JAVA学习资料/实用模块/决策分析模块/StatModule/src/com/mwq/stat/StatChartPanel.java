/*
 * ChartPanel.java
 *
 * Created on 2008年7月10日, 下午1:03
 */
package com.mwq.stat;

import com.mwq.stat.dataform.DataForm;
import com.mwq.stat.chart.AreaAnalyseRow;
import com.mwq.stat.chart.AreaCollectRow;
import com.mwq.stat.chart.Bar;
import com.mwq.stat.chart.BarAnalyseColumn;
import com.mwq.stat.chart.BarAnalyseRow;
import com.mwq.stat.chart.BarCollectColumn;
import com.mwq.stat.chart.BarCollectRow;
import com.mwq.stat.chart.PieAnalyseColumn;
import com.mwq.stat.chart.PieAnalyseRow;
import com.mwq.stat.frame.ProgressBarDialog;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractButton;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JRadioButton;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileFilter;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.JFreeChart;

/**
 * 版权所有：明日科技有限公司
 * @author  Administrator
 */
public class StatChartPanel extends javax.swing.JPanel {

    private GridLayout chartPanelLayout;
    private DefaultComboBoxModel unenabledComboBoxModel;
    private DefaultComboBoxModel rowComboBoxModel;
    private DefaultComboBoxModel columnComboBoxModel;
    private ItemListener indexComboBoxListener;

    /** Creates new form ChartPanel */
    public StatChartPanel() {
        initComponents();

        chartRadioButtonActionPerformed(null);

        unenabledComboBoxModel = (DefaultComboBoxModel) indexComboBox.getModel();

        Vector rowItems = new Vector();
        rowItems.add("全部");
        Vector<Vector> tableData = DataForm.getTableData();
        for (int row = 0; row < tableData.size(); row++) {
            rowItems.add(tableData.get(row).get(0));
        }
        rowComboBoxModel = new DefaultComboBoxModel(rowItems);

        Vector columnItems = new Vector();
        columnItems.addAll(DataForm.getColumnName());
        columnItems.set(0, "全部");
        columnComboBoxModel = new DefaultComboBoxModel(columnItems);

        indexComboBoxListener = indexComboBox.getItemListeners()[0];
    }

    private void setTypeEnabled(boolean radioButtons, boolean comboBox) {
        if (rowRadioButton.isEnabled() != radioButtons) {// 单选按钮的可用性发生改变

            rowRadioButton.setEnabled(radioButtons);
            columnRadioButton.setEnabled(radioButtons);
        }
        if (indexComboBox.isEnabled() != comboBox) {// 组合框的可用性发生改变

            indexComboBox.setEnabled(comboBox);
            if (!comboBox) {// 变为不可用

                indexComboBox.setModel(unenabledComboBoxModel);// 设置为不可用的组合框模型

            }
        }
        if (comboBox) {// 组合框可用

            if (rowRadioButton.isSelected()) {// 行单选按钮被选中

                indexComboBox.setModel(rowComboBoxModel);// 设置为行组合框模型

            } else {// 列单选按钮被选中

                indexComboBox.setModel(columnComboBoxModel);// 设置为列组合框模型

            }
            indexComboBox.removeItemListener(indexComboBoxListener);// 移去选中项事件监听器

            indexComboBox.setSelectedIndex(1);// 设置组合框的选中项

            indexComboBox.addItemListener(indexComboBoxListener);// 添加选中项事件监听器

        }
    }

    private void refreshChartsPanel(ChartPanel chartPanel) {
        chartsPanel.removeAll();// 清空统计图面板

        if (chartPanelLayout.getColumns() != 1) {// 确定是否为一列

            chartPanelLayout.setColumns(1);
        }
        chartsPanel.add(chartPanel);// 添加统计图到面板中

        SwingUtilities.updateComponentTreeUI(chartsPanel);// 刷新统计图面板

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        chartButtonGroup = new javax.swing.ButtonGroup();
        typeButtonGroup = new javax.swing.ButtonGroup();
        tablePopupMenu = new javax.swing.JPopupMenu();
        barMenuItem = new javax.swing.JMenuItem();
        barCollectMenu = new javax.swing.JMenu();
        barCollectRowMenuItem = new javax.swing.JMenuItem();
        barCollectColumnMenuItem = new javax.swing.JMenuItem();
        barAnalyesMenu = new javax.swing.JMenu();
        barAnalyesRowMenuItem = new javax.swing.JMenuItem();
        barAnalyesColumnMenuItem = new javax.swing.JMenuItem();
        pieAnalyesMenu = new javax.swing.JMenu();
        pieAnalyesRowMenuItem = new javax.swing.JMenuItem();
        pieAnalyesColumnMenuItem = new javax.swing.JMenuItem();
        areaCollectMenuItem = new javax.swing.JMenuItem();
        areaAnalyesMenuItem = new javax.swing.JMenuItem();
        chartToolBar = new javax.swing.JToolBar();
        saveButton = new javax.swing.JButton();
        saveButton.setText("保存图片");
        jSeparator1 = new javax.swing.JToolBar.Separator();
        barRadioButton = new javax.swing.JRadioButton();
        barRadioButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        barRadioButton.setText("概 览");
        barCollectRadioButton = new javax.swing.JRadioButton();
        barCollectRadioButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        barCollectRadioButton.setText("汇 总");
        barAnalyesRadioButton = new javax.swing.JRadioButton();
        barAnalyesRadioButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        barAnalyesRadioButton.setText("分 析");
        pieAnalyseRadioButton = new javax.swing.JRadioButton();
        pieAnalyseRadioButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        pieAnalyseRadioButton.setText("分 析");
        areaCollectRadioButton = new javax.swing.JRadioButton();
        areaCollectRadioButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        areaCollectRadioButton.setText("汇 总");
        areaAnalyseRadioButton = new javax.swing.JRadioButton();
        areaAnalyseRadioButton.setVerticalTextPosition(SwingConstants.BOTTOM);
        areaAnalyseRadioButton.setText("分 析");
        jSeparator2 = new javax.swing.JToolBar.Separator();
        typePanel = new javax.swing.JPanel();
        rowRadioButton = new javax.swing.JRadioButton();
        columnRadioButton = new javax.swing.JRadioButton();
        indexComboBox = new javax.swing.JComboBox();
        chartsScrollPane = new javax.swing.JScrollPane();
        chartsPanel = new javax.swing.JPanel();

        barMenuItem.setText("柱型图概览");
        tablePopupMenu.add(barMenuItem);

        barCollectMenu.setText("柱型图汇总");

        barCollectRowMenuItem.setText("选定行");
        barCollectMenu.add(barCollectRowMenuItem);

        barCollectColumnMenuItem.setText("选定列");
        barCollectMenu.add(barCollectColumnMenuItem);

        tablePopupMenu.add(barCollectMenu);

        barAnalyesMenu.setText("柱型图分析");

        barAnalyesRowMenuItem.setText("选定行");
        barAnalyesMenu.add(barAnalyesRowMenuItem);

        barAnalyesColumnMenuItem.setText("选定列");
        barAnalyesMenu.add(barAnalyesColumnMenuItem);

        tablePopupMenu.add(barAnalyesMenu);

        pieAnalyesMenu.setText("饼醒图分析");

        pieAnalyesRowMenuItem.setText("选定行");
        pieAnalyesMenu.add(pieAnalyesRowMenuItem);

        pieAnalyesColumnMenuItem.setText("选定列");
        pieAnalyesMenu.add(pieAnalyesColumnMenuItem);

        tablePopupMenu.add(pieAnalyesMenu);

        areaCollectMenuItem.setText("区域图汇总");
        tablePopupMenu.add(areaCollectMenuItem);

        areaAnalyesMenuItem.setText("区域图分析");
        tablePopupMenu.add(areaAnalyesMenuItem);

        setLayout(new java.awt.BorderLayout());

        chartToolBar.setFloatable(false);
        chartToolBar.setRollover(true);

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/save.png"))); // NOI18N
        saveButton.setToolTipText("保存当前生成的所有统计图");
        saveButton.setFocusable(false);
        saveButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/save_selected.png"))); // NOI18N
        saveButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/save_on.png"))); // NOI18N
        saveButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        chartToolBar.add(saveButton);
        chartToolBar.add(jSeparator1);

        chartButtonGroup.add(barRadioButton);
        barRadioButton.setSelected(true);
        barRadioButton.setToolTipText("柱型图概览");
        barRadioButton.setFocusable(false);
        barRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        barRadioButton.setHorizontalTextPosition(SwingConstants.CENTER);
        barRadioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/bar.png"))); // NOI18N
        barRadioButton.setMaximumSize(new java.awt.Dimension(60, 60));
        barRadioButton.setMinimumSize(new java.awt.Dimension(60, 60));
        barRadioButton.setName("柱型图概览"); // NOI18N
        barRadioButton.setPreferredSize(new java.awt.Dimension(60, 60));
        barRadioButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/bar_on.png"))); // NOI18N
        barRadioButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/bar_selected.png"))); // NOI18N
        barRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartRadioButtonActionPerformed(evt);
            }
        });
        chartToolBar.add(barRadioButton);

        chartButtonGroup.add(barCollectRadioButton);
        barCollectRadioButton.setToolTipText("柱型图汇总");
        barCollectRadioButton.setFocusable(false);
        barCollectRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        barCollectRadioButton.setHorizontalTextPosition(SwingConstants.CENTER);
        barCollectRadioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/barCollect.png"))); // NOI18N
        barCollectRadioButton.setMaximumSize(new java.awt.Dimension(60, 60));
        barCollectRadioButton.setMinimumSize(new java.awt.Dimension(60, 60));
        barCollectRadioButton.setName("柱型图汇总"); // NOI18N
        barCollectRadioButton.setPreferredSize(new java.awt.Dimension(60, 60));
        barCollectRadioButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/barCollect_on.png"))); // NOI18N
        barCollectRadioButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/barCollect_selected.png"))); // NOI18N
        barCollectRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartRadioButtonActionPerformed(evt);
            }
        });
        chartToolBar.add(barCollectRadioButton);

        chartButtonGroup.add(barAnalyesRadioButton);
        barAnalyesRadioButton.setToolTipText("柱型图分析");
        barAnalyesRadioButton.setFocusable(false);
        barAnalyesRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        barAnalyesRadioButton.setHorizontalTextPosition(SwingConstants.CENTER);
        barAnalyesRadioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/barAnalyes.png"))); // NOI18N
        barAnalyesRadioButton.setMaximumSize(new java.awt.Dimension(60, 60));
        barAnalyesRadioButton.setMinimumSize(new java.awt.Dimension(60, 60));
        barAnalyesRadioButton.setName("柱型图分析"); // NOI18N
        barAnalyesRadioButton.setPreferredSize(new java.awt.Dimension(60, 60));
        barAnalyesRadioButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/barAnalyes_on.png"))); // NOI18N
        barAnalyesRadioButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/barAnalyes_selected.png"))); // NOI18N
        barAnalyesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartRadioButtonActionPerformed(evt);
            }
        });
        chartToolBar.add(barAnalyesRadioButton);

        chartButtonGroup.add(pieAnalyseRadioButton);
        pieAnalyseRadioButton.setToolTipText("饼型图分析");
        pieAnalyseRadioButton.setFocusable(false);
        pieAnalyseRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        pieAnalyseRadioButton.setHorizontalTextPosition(SwingConstants.CENTER);
        pieAnalyseRadioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/pieAnalyes.png"))); // NOI18N
        pieAnalyseRadioButton.setMaximumSize(new java.awt.Dimension(60, 60));
        pieAnalyseRadioButton.setMinimumSize(new java.awt.Dimension(60, 60));
        pieAnalyseRadioButton.setName("饼型图分析"); // NOI18N
        pieAnalyseRadioButton.setPreferredSize(new java.awt.Dimension(60, 60));
        pieAnalyseRadioButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/pieAnalyes_on.png"))); // NOI18N
        pieAnalyseRadioButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/pieAnalyes_selected.png"))); // NOI18N
        pieAnalyseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartRadioButtonActionPerformed(evt);
            }
        });
        chartToolBar.add(pieAnalyseRadioButton);

        chartButtonGroup.add(areaCollectRadioButton);
        areaCollectRadioButton.setToolTipText("区域图汇总");
        areaCollectRadioButton.setFocusable(false);
        areaCollectRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        areaCollectRadioButton.setHorizontalTextPosition(SwingConstants.CENTER);
        areaCollectRadioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/areaCollect.png"))); // NOI18N
        areaCollectRadioButton.setMaximumSize(new java.awt.Dimension(60, 60));
        areaCollectRadioButton.setMinimumSize(new java.awt.Dimension(60, 60));
        areaCollectRadioButton.setName("区域图汇总"); // NOI18N
        areaCollectRadioButton.setPreferredSize(new java.awt.Dimension(60, 60));
        areaCollectRadioButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/areaCollect_on.png"))); // NOI18N
        areaCollectRadioButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/areaCollect_selected.png"))); // NOI18N
        areaCollectRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartRadioButtonActionPerformed(evt);
            }
        });
        chartToolBar.add(areaCollectRadioButton);

        chartButtonGroup.add(areaAnalyseRadioButton);
        areaAnalyseRadioButton.setToolTipText("区域图分析");
        areaAnalyseRadioButton.setFocusable(false);
        areaAnalyseRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        areaAnalyseRadioButton.setHorizontalTextPosition(SwingConstants.CENTER);
        areaAnalyseRadioButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/areaAnalyes.png"))); // NOI18N
        areaAnalyseRadioButton.setMaximumSize(new java.awt.Dimension(60, 60));
        areaAnalyseRadioButton.setMinimumSize(new java.awt.Dimension(60, 60));
        areaAnalyseRadioButton.setName("区域图分析"); // NOI18N
        areaAnalyseRadioButton.setPreferredSize(new java.awt.Dimension(60, 60));
        areaAnalyseRadioButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/areaAnalyes_on.png"))); // NOI18N
        areaAnalyseRadioButton.setSelectedIcon(new javax.swing.ImageIcon(getClass().getResource("/com/mwq/stat/img/areaAnalyes_selected.png"))); // NOI18N
        areaAnalyseRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chartRadioButtonActionPerformed(evt);
            }
        });
        chartToolBar.add(areaAnalyseRadioButton);
        chartToolBar.add(jSeparator2);

        typePanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        typePanel.setMaximumSize(new java.awt.Dimension(100, 30));
        typePanel.setMinimumSize(new java.awt.Dimension(100, 30));
        typePanel.setPreferredSize(new java.awt.Dimension(100, 30));
        typePanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 2, 2));

        typeButtonGroup.add(rowRadioButton);
        rowRadioButton.setSelected(true);
        rowRadioButton.setText("行");
        rowRadioButton.setEnabled(false);
        rowRadioButton.setFocusable(false);
        rowRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        rowRadioButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        rowRadioButton.setMaximumSize(new java.awt.Dimension(40, 20));
        rowRadioButton.setMinimumSize(new java.awt.Dimension(40, 20));
        rowRadioButton.setPreferredSize(new java.awt.Dimension(40, 20));
        rowRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeRadioButtonActionPerformed(evt);
            }
        });
        typePanel.add(rowRadioButton);

        typeButtonGroup.add(columnRadioButton);
        columnRadioButton.setText("列");
        columnRadioButton.setEnabled(false);
        columnRadioButton.setFocusable(false);
        columnRadioButton.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        columnRadioButton.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        columnRadioButton.setMaximumSize(new java.awt.Dimension(40, 20));
        columnRadioButton.setMinimumSize(new java.awt.Dimension(40, 20));
        columnRadioButton.setPreferredSize(new java.awt.Dimension(40, 20));
        columnRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeRadioButtonActionPerformed(evt);
            }
        });
        typePanel.add(columnRadioButton);

        chartToolBar.add(typePanel);

        indexComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "<不可用>" }));
        indexComboBox.setEnabled(false);
        indexComboBox.setMaximumSize(new java.awt.Dimension(120, 30));
        indexComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                indexComboBoxItemStateChanged(evt);
            }
        });
        chartToolBar.add(indexComboBox);

        add(chartToolBar, java.awt.BorderLayout.PAGE_START);

        chartsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(5, 5, 5, 5));
        chartsPanel.setLayout(new java.awt.GridLayout(0, 1, 10, 10));
        chartPanelLayout=(GridLayout)chartsPanel.getLayout();
        chartsScrollPane.setViewportView(chartsPanel);

        add(chartsScrollPane, java.awt.BorderLayout.CENTER);
    }// </editor-fold>                        

private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {                                           
// TODO add your handling code here:
    JFileChooser pathChooser = new JFileChooser();// 创建文件选择器对话框对象

    pathChooser.setFileFilter(new FileFilter() {// 设置文件过滤器

        @Override
        public boolean accept(File file) {// 重构该方法，定义接受文件类型

            if (file.isDirectory()) {// 为文件夹

                return true;// 接受

            } else {
                if (file.getName().toLowerCase().endsWith(".png")) {// 为PNG格式图象

                    return true;// 接受

                } else {// 其他

                    return false;// 不接受

                }
            }
        }

        @Override
        public String getDescription() {// 重构该方法，定义描述信息

            return "PNG 格式的图像";// 只接受PNG格式的图象

        }
    });
    final Component[] components = chartsPanel.getComponents();// 获得当前生成的所有统计图

    final int chartAmount = components.length;// 获得统计图数量

    if (chartAmount == 1) {// 只有一个

        ChartPanel chartPanel = (ChartPanel) components[0];// 获得统计图面板

        JFreeChart chart = chartPanel.getChart();// 获得统计图对象

        pathChooser.setSelectedFile(new File(chart.getTitle().getText() + ".png"));// 设置默认的图片名称

        int showSaveDialog = pathChooser.showSaveDialog(this);// 显示文件选择器对话框

        if (showSaveDialog == JFileChooser.APPROVE_OPTION) {// 用户选择了保存路径

            File selectedFile = pathChooser.getSelectedFile();// 获得图片文件对象

            try {
                ChartUtilities.saveChartAsPNG(selectedFile, chart, 800, 600);// 保存图片到图片文件

            } catch (IOException ex) {
                Logger.getLogger(StatChartPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    } else {// 有多个

        pathChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);// 只允许选择文件路径

        int showSaveDialog = pathChooser.showSaveDialog(this);// 显示文件选择器对话框

        if (showSaveDialog == JFileChooser.APPROVE_OPTION) {// 用户选择了保存路径

            final String selectedPath = pathChooser.getSelectedFile().getPath();
            final ProgressBarDialog progressBarDialog = new ProgressBarDialog(null, true);// 创建进度条对话框对象

            progressBarDialog.adoptDeterminate(chartAmount);// 采用确定进度的进度条

            new Thread() {// 创建并开启一个线程

                @Override
                public void run() {// 重构该方法

                    for (int i = 0; i < chartAmount; i++) {
                        ChartPanel chartPanel = (ChartPanel) components[i];// 获得统计图面板

                        JFreeChart chart = chartPanel.getChart();// 获得统计图

                        try {
                            File statChart = new File(selectedPath + "/" +
                                    chart.getTitle().getText() + ".png");// 在指定路径创建图片文件对象

                            ChartUtilities.saveChartAsPNG(statChart, chart, 800, 600);// 保存统计图到图片文件中

                        } catch (IOException ex) {
                            Logger.getLogger(StatChartPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        progressBarDialog.setValue(i + 1);// 修改进度值

                        try {
                            Thread.sleep(300);// 休眠3秒

                        } catch (InterruptedException ex) {
                            Logger.getLogger(StatChartPanel.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                    progressBarDialog.finishDeterminate();// 完成任务

                }
            }.start();
            progressBarDialog.setVisible(true);// 设置进度条对话框可见

        }
    }
}                                          

private void chartRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                 
// TODO add your handling code here:
    Enumeration<AbstractButton> elements =
            chartButtonGroup.getElements();// 获得统计图单选按钮组的枚举对象

    while (elements.hasMoreElements()) {// 遍历枚举对象

        JRadioButton radioButton = (JRadioButton) elements.nextElement();// 获得单选按钮对象

        if (radioButton.isSelected()) {// 查看单选按钮是否被选中

            String chartType = radioButton.getName();// 获得统计图类型

            if (chartType.equals("柱型图概览")) {
                if (columnRadioButton.isSelected()) {// 确保行单选按钮被选中

                    rowRadioButton.setSelected(true);
                }
                setTypeEnabled(false, false);// 都不可用

                refreshChartsPanel(new Bar());
            } else if (chartType.equals("柱型图汇总")) {
                setTypeEnabled(true, false);// 单选按钮组可用

                if (rowRadioButton.isSelected()) {// 汇总行

                    refreshChartsPanel(new BarCollectRow());
                } else {// 汇总列

                    refreshChartsPanel(new BarCollectColumn());
                }
            } else if (chartType.equals("柱型图分析")) {
                setTypeEnabled(true, true);// 都可用

                if (rowRadioButton.isSelected()) {// 汇总行

                    refreshChartsPanel(new BarAnalyseRow((indexComboBox.getSelectedIndex() - 1)));
                } else {// 汇总列

                    refreshChartsPanel(new BarAnalyseColumn((indexComboBox.getSelectedIndex())));
                }
            } else if (chartType.equals("饼型图分析")) {
                setTypeEnabled(true, true);// 都可用

                if (rowRadioButton.isSelected()) {// 汇总行

                    refreshChartsPanel(new PieAnalyseRow((indexComboBox.getSelectedIndex() - 1)));
                } else {// 汇总列

                    refreshChartsPanel(new PieAnalyseColumn((indexComboBox.getSelectedIndex())));
                }
            } else if (chartType.equals("区域图汇总")) {
                if (columnRadioButton.isSelected()) {// 确保行单选按钮被选中

                    rowRadioButton.setSelected(true);
                }
                setTypeEnabled(false, false);// 都不可用

                refreshChartsPanel(new AreaCollectRow());
            } else {// 区域图分析

                if (columnRadioButton.isSelected()) {// 确保行单选按钮被选中

                    rowRadioButton.setSelected(true);
                }

                setTypeEnabled(false, true);// 组合框可用

                refreshChartsPanel(new AreaAnalyseRow((indexComboBox.getSelectedIndex() - 1)));
            }
            break;// 找到被选中的按钮，跳出循环

        }
    }
}                                                

private void typeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {                                                
// TODO add your handling code here:
    if (rowRadioButton.isSelected()) {
        indexComboBox.setModel(rowComboBoxModel);
    } else {
        indexComboBox.setModel(columnComboBoxModel);
    }
    chartRadioButtonActionPerformed(null);
}                                               

private void indexComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {                                               
// TODO add your handling code here:    
    if (evt.getStateChange() == ItemEvent.SELECTED) {// 由选中项触发

        int selectedIndex = indexComboBox.getSelectedIndex();// 获得选中项的索引值

        final ChartPanel chartPanel =
                (ChartPanel) chartsPanel.getComponent(0);// 获得当前的统计图面板对象

        if (selectedIndex == 0) {// 生成该类统计对象的所有统计图

            final int chartAmount = indexComboBox.getItemCount() - 1;// 获得统计图的数量

            final ProgressBarDialog progressBarDialog = new ProgressBarDialog(null, true);// 创建进度条对话框

            progressBarDialog.adoptDeterminate(chartAmount);// 采用确定进度的进度条

            new  

                  Thread() {// 创建并开启一个线程



                    
                    @Override
                public void run() {// 重构该方法

                    chartsPanel.removeAll();// 清空统计图面板

                    chartPanelLayout.setColumns(2);// 设置为两列显示

                    if (chartPanel instanceof BarAnalyseRow) {// 利用柱形图分析行

                        for (int row = 0; row < chartAmount; row++) {
                            chartsPanel.add(new BarAnalyseRow(row));// 生成统计图并添加到面板中

                            refresh(row + 1);// 刷新面板和进度条

                        }
                    } else if (chartPanel instanceof BarAnalyseColumn) {// 利用柱形图分析列

                        for (int column = 1; column < chartAmount + 1; column++) {
                            chartsPanel.add(new BarAnalyseColumn(column));// 生成统计图并添加到面板中

                            refresh(column);// 刷新面板和进度条

                        }
                    } else if (chartPanel instanceof PieAnalyseRow) {// 利用饼形图分析行

                        for (int row = 0; row < chartAmount; row++) {
                            chartsPanel.add(new PieAnalyseRow(row));// 生成统计图并添加到面板中

                            refresh(row + 1);// 刷新面板和进度条

                        }
                    } else if (chartPanel instanceof PieAnalyseColumn) {// 利用饼形图分析列

                        for (int column = 1; column < chartAmount + 1; column++) {
                            chartsPanel.add(new PieAnalyseColumn(column));// 生成统计图并添加到面板中

                            refresh(column);// 刷新面板和进度条

                        }
                    } else {// 利用区域图分析行

                        for (int row = 0; row < chartAmount; row++) {
                            chartsPanel.add(new AreaAnalyseRow(row));// 生成统计图并添加到面板中

                            refresh(row + 1);// 刷新面板和进度条

                        }
                    }
                    progressBarDialog.finishDeterminate();// 完成任务

                }

                private void refresh(int num) {
                    SwingUtilities.updateComponentTreeUI(chartsPanel);// 刷新面板

                    progressBarDialog.setValue(num);// 刷新进度条

                    try {
                        Thread.sleep(300);// 休眠3秒

                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
            }.start();
            progressBarDialog.setVisible(true);// 设置进度条对话框可见

        } else {// 生成指定统计对象的统计图

            if (chartPanel instanceof BarAnalyseRow) {// 利用柱形图分析行

                refreshChartsPanel(new BarAnalyseRow(selectedIndex - 1));
            } else if (chartPanel instanceof BarAnalyseColumn) {// 利用柱形图分析列

                refreshChartsPanel(new BarAnalyseColumn(selectedIndex));
            } else if (chartPanel instanceof PieAnalyseRow) {// 利用饼形图分析行

                refreshChartsPanel(new PieAnalyseRow(selectedIndex - 1));
            } else if (chartPanel instanceof PieAnalyseColumn) {// 利用饼形图分析列

                refreshChartsPanel(new PieAnalyseColumn(selectedIndex));
            } else {// 利用区域图分析行

                refreshChartsPanel(new AreaAnalyseRow(selectedIndex - 1));
            }
        }
    }
}                                              

    // Variables declaration - do not modify                     
    private javax.swing.JMenuItem areaAnalyesMenuItem;
    private javax.swing.JRadioButton areaAnalyseRadioButton;
    private javax.swing.JMenuItem areaCollectMenuItem;
    private javax.swing.JRadioButton areaCollectRadioButton;
    private javax.swing.JMenuItem barAnalyesColumnMenuItem;
    private javax.swing.JMenu barAnalyesMenu;
    private javax.swing.JRadioButton barAnalyesRadioButton;
    private javax.swing.JMenuItem barAnalyesRowMenuItem;
    private javax.swing.JMenuItem barCollectColumnMenuItem;
    private javax.swing.JMenu barCollectMenu;
    private javax.swing.JRadioButton barCollectRadioButton;
    private javax.swing.JMenuItem barCollectRowMenuItem;
    private javax.swing.JMenuItem barMenuItem;
    private javax.swing.JRadioButton barRadioButton;
    private javax.swing.ButtonGroup chartButtonGroup;
    private javax.swing.JToolBar chartToolBar;
    private javax.swing.JPanel chartsPanel;
    private javax.swing.JScrollPane chartsScrollPane;
    private javax.swing.JRadioButton columnRadioButton;
    private javax.swing.JComboBox indexComboBox;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JMenuItem pieAnalyesColumnMenuItem;
    private javax.swing.JMenu pieAnalyesMenu;
    private javax.swing.JMenuItem pieAnalyesRowMenuItem;
    private javax.swing.JRadioButton pieAnalyseRadioButton;
    private javax.swing.JRadioButton rowRadioButton;
    private javax.swing.JButton saveButton;
    private static javax.swing.JPopupMenu tablePopupMenu;
    private javax.swing.ButtonGroup typeButtonGroup;
    private javax.swing.JPanel typePanel;
    // End of variables declaration                   
}
